name: Merge Coverage Files and Generate SVG

on:
  workflow_call:
    inputs:
      artifact-prefix:
        description: 'the postfix of the coverage artifacts to merge'
        required: false
        type: string
        default: "reports"

jobs:
  merge-and-generate-svg:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout base code
        uses: actions/checkout@v4

      - name: get Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*${{ inputs.artifact-prefix }}*'
          path: reports

      - name: Organize Coverage Files
        run: |
          mkdir -p organized/coverage_out
          mkdir -p organized/report_xml
          find reports -name "*coverage.out" -exec mv {} organized/coverage_out/ \;
          find reports -name "*report.xml" -exec mv {} organized/report_xml/ \;

      - name: upload artifacts reports xml
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: organized/report_xml

      - name: Merge coverage files
        run: |
          coverage_files=$(find organized/coverage_out -name "*.out")
          if [ -n "$coverage_files" ]; then
            go run github.com/wadey/gocovmerge@latest $coverage_files > merged-coverage.out
          else
            echo "No coverage files found" && exit 1
          fi

      - name: Generate SVG from merged coverage file
        run: |
          go run github.com/nikolaydubina/go-cover-treemap@latest -coverprofile=merged-coverage.out > coverage.svg

      - name: Create coverage report
        run: |
          go get github.com/boumenot/gocover-cobertura
          go install github.com/boumenot/gocover-cobertura
          go run github.com/boumenot/gocover-cobertura -by-files -ignore-gen-files < merged-coverage.out > coverage.xml

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.2
        with:
          reports: coverage.xml
          targetdir: /tmp/coveragereport
          toolpath: /tmp/reportgeneratortool

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            /tmp/coveragereport

  deploy:
    needs: merge-and-generate-svg
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v4

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      # Load the Allure history from gh-pages
      - name: Load Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages/allure-report
          persist-credentials: true

      # Ensure the history directory exists
      - name: Create history directory if not exists
        run: |
          mkdir -p gh-pages/allure-report/history

      # Fix permissions before copying files
      - name: Fix Permissions
        run: |
          sudo chmod -R 777 gh-pages/allure-report/history

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: gh-pages/allure-report/history
          allure_results: allure-results
          allure_report: allure-report

      - name: Copy Allure report to gh-pages
        run: |
          mkdir -p gh-pages/allure-report
          cp -r allure-report/* gh-pages/allure-report/

      - name: Copy coverage report to gh-pages
        run: |
          mkdir -p gh-pages/coverage-report
          cp -r coverage-report/* gh-pages/coverage-report/

      - name: Publish test and coverage reports
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages
